(1)初始化一个Git仓库，使用git init命令。
(2)添加文件到Git仓库，分两步：
  第一步，用命令git add告诉Git，把文件添加到仓库：
  $ git add readme.txt
  第二步，用命令git commit告诉Git，把文件提交到仓库：
  $ git commit -m "write a readme file"
(3)要随时掌握工作区的状态，使用git status命令。
   如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
(4)Git是如何跟踪修改的，每次修改，如果不add到暂存区，那就不会加入到commit中。
(5)HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
     穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
     要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
(6)场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
    场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
    场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
(7)命令git rm用于删除一个文件。
   如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。
   git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
   
   ssh-keygen -t rsa -C "1017582835@qq.com"
(8)要关联一个远程库，使用命令git remote add origin https://github.com/banluren/learnGit.git
   关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
   此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
   分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！
   当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！
(9)远程库已经准备好了，下一步是用命令git clone克隆一个本地库
   git clone git@github.com:/banluren/hello-world.git
   如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。

   你也许还注意到，GitHub给出的地址不止一个，还可以用https://github.com/banluren/hello-world.git这样的地址。
   实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。
   使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。

   要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
   Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。
(10)Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。
    查看分支：git branch
    创建分支：git branch <name>
    切换分支：git checkout <name>
    创建+切换分支：git checkout -b <name>
    合并某分支到当前分支：git merge <name>
    删除分支：git branch -d <name>
(11)readme.txt文件存在冲突，必须手动解决冲突后再提交
    当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
    用git log --graph命令可以看到分支合并图。
    用带参数的git log也可以看到分支的合并情况：$ git log --graph --pretty=oneline --abbrev-commit
(12)通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
    如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
    准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward
    $ git merge --no-ff -m "merge with no-ff" dev
    因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。
    合并后，我们用git log看看分支历史：git log --graph --pretty=oneline --abbrev-commit
(13)分支策略：
    在实际开发中，我们应该按照几个基本原则进行分支管理：
    首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
    那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，再把dev分支合并到master上，在master分支版本
    每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。

    Git分支十分强大，在团队开发中应该充分应用。
    合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
(14)修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除
    修复完成后，切换到master分支，并完成合并，最后删除issue-101分支
    当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。

    太棒了，原计划两个小时的bug修复只花了5分钟！现在，是时候接着回到dev分支干活了！
    工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看：$ git stash list
    工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：
    一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
    另一种方式是用git stash pop，恢复的同时把stash内容也删了：$ git stash pop
    再用git stash list查看，就看不到任何stash内容了

    你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：$ git stash apply stash@{0}
(15)开发一个新feature，最好新建一个分支；$ git checkout -b feature-vulcan
    如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
(16)当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。
    查看本地分支和远程分支:$ git branch -a
    git查看本地分支关联的远程分支:$ git branch -vv

    查看远程库信息，使用git remote -v；
    本地新建的分支如果不推送到远程，对其他人就是不可见的；
    从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
    在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
    建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
    从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
(17)命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
    git tag -a <tagname> -m "blablabla..."可以指定标签信息；
    git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
    命令git tag可以查看所有标签。
(18)命令git push origin <tagname>可以推送一个本地标签
    命令git push origin --tags可以推送全部未推送过的本地标签
    命令git tag -d <tagname>可以删除一个本地标签
    命令git push origin :refs/tags/<tagname>可以删除一个远程标签。
(19)在GitHub上，可以任意Fork开源仓库
    自己拥有Fork后的仓库的读写权限
    可以推送pull request给官方仓库来贡献代码。
(20)忽略某些文件时，需要编写.gitignore；
    .gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！
(21)有没有经常敲错命令？比如git status？status这个单词真心不好记。
    如果敲git st就表示git status那就简单多了，当然这种偷懒的办法我们是极力赞成的。
    我们只需要敲一行命令，告诉Git，以后st就表示status：$ git config --global alias.st status

    $ git config --global alias.co checkout
    $ git config --global alias.ci commit
    $ git config --global alias.br branch
    --global参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。

    配置一个git last，让其显示最后一次提交信息：$ git config --global alias.last 'log -1'
    给Git配置好别名，就可以输入命令时偷个懒。我们鼓励偷懒。
 (22)在远程仓库一节中，我们讲了远程仓库实际上和本地仓库没啥不同，纯粹为了7x24小时开机并交换大家的修改。
     GitHub就是一个免费托管开源代码的远程仓库。
     但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。
 (23)有很多不但视源代码如生命，而且视员工为窃贼的公司
     搭建Git服务器非常简单，通常10分钟即可完成；
     要方便管理公钥，用Gitosis；
     要像SVN那样变态地控制权限，用Gitolite。
 (24)Git虽然极其强大，命令繁多，但常用的就那么十来个，掌握好这十几个常用命令，你已经可以得心应手地使用Git了。